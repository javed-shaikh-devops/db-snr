name: Create, Test, and Destroy GKE Cluster

on:
  workflow_dispatch:

jobs:
  create-test-destroy:
    name: Create, Test, and Destroy GKE Cluster
    runs-on: ubuntu-latest #[self-hosted, gke-runners]

    defaults:
      run:
        shell: bash
        working-directory: ./GHA-S-2/terraform  # Your terraform folder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY_JSON }}'
          export_default_credentials: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY_JSON }}


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Write GCP credentials to file
        run: |
          echo '${{ secrets.GCP_SA_KEY_JSON }}' > credentials.json

      - name: Initialize Terraform
        run: |
          pwd
          ls -ltr 
          terraform init
          pwd

      - name: Terraform Plan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/credentials.json
        run: |
          # Set debug logging environment variable for Terraform
          export TF_LOG=DEBUG
          export TF_LOG_PATH=terraform-debug.log  # Optional: Save logs to a fi
          pwd
          ls -ltr
          terraform plan -var="credentials_file=./credentials.json" -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -out=tfplan 
          

      - name: Terraform Apply - Create GKE Autopilot Cluster
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: |
          terraform apply -auto-approve tfplan

      - name: Set gcloud to use GKE auth plugin
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Extract Terraform Outputs
        id: tf_outputs
        run: |
          echo "GKE_CLUSTER_NAME=$(terraform output -raw gke_cluster_name)" >> $GITHUB_ENV
          echo "GKE_CLUSTER_REGION=$(terraform output -raw gke_cluster_region)" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(terraform output -raw project_id)" >> $GITHUB_ENV

      - name: Configure kubectl context
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME \
            --region $GKE_CLUSTER_REGION \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify Cluster - Get Pods
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces

      - name: Terraform Destroy - Cleanup GKE Cluster
        if: always()  # important: destroy even if kubectl step fails
        run: |
          terraform destroy -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="credentials_file=./credentials.json"
